{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "selector",
  "type": "registry:ui",
  "description": "A versatile Selector component with multiple variants and display modes",
  "dependencies": [
    "next-intl"
  ],
  "registryDependencies": [
    "select",
    "tooltip"
  ],
  "files": [
    {
      "path": "ui/selector.tsx",
      "content": "import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from './select.tsx'\nimport {Tooltip, TooltipContent, TooltipTrigger} from './tooltip.tsx';\nimport React, {forwardRef} from 'react'\nimport {CTA} from \"./cta.tsx\";\nimport Picto from \"./picto.tsx\";\nexport interface Option {\n    value: string\n    label: string\n    title?: string\n    description?: string\n    icon?: string\n    img?: string\n    disabled?: boolean\n}\n\nexport interface SelectorProps {\n    options: Option[]\n    onChange: (value: string) => void\n    value: string\n    placeholder?: string\n    className?: string\n    label?: string\n    name?: string\n    variant?: 'default' | 'radio' | 'tab' | 'option'\n    ctaVariant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive'\n    displayMode?: 'standard' | 'text' | 'icon' | 'sans-label' | 'icon-only'\n    expand?: boolean\n    iconSize?: 'small' | 'medium' | 'large'\n    labelPosition?: 'top' | 'left'\n    showIcons?: boolean\n}\n\nconst Selector = forwardRef<HTMLDivElement, SelectorProps>((\n        {\n            options,\n            onChange,\n            value,\n            placeholder = 'Select an option',\n            className = '',\n            label,\n            name,\n            variant = 'default',\n            ctaVariant,\n            displayMode = 'standard',\n            expand = false,\n            labelPosition,\n            showIcons = true,\n        },\n        ref) => {\n        const translate = (value: string) => value\n\n        const effectiveLabelPosition = labelPosition || (variant === 'radio' || variant === 'option' ? 'left' : 'top')\n\n        if (variant === 'option' || variant === 'radio') {\n            return (\n                <div\n                    className={`${\n                        effectiveLabelPosition === 'left' ? 'flex flex-row items-center gap-4' : 'flex flex-col'\n                    } ${className}`}\n                >\n                    <div\n                        className=\"flex items-center justify-center gap-1.5 p-1.5 rounded-[11px]\">\n                        {label && (\n                            <label\n                                className={`ps-3 pe-6 h-fit text-black ${\n                                    effectiveLabelPosition === 'left' ? 'text-sm font-medium' : 'mb-2 text-sm font-medium'\n                                }`}\n                            >\n                                {translate(label)}\n                            </label>\n                        )}\n                        {options.map((option) => {\n                            let content: React.ReactNode\n                            const dimensions = ''\n                            let padding = ''\n                            let startIcon = showIcons && option.icon ? option.icon : undefined\n\n                            if (value === option.value) {\n                                startIcon = showIcons && option.icon ? option.icon : undefined\n                            }\n\n                            if (option.disabled) {\n                                startIcon = showIcons && option.icon ? option.icon : undefined\n                            }\n\n                            if (displayMode === 'standard') {\n                                padding = 'px-3'\n                                content = <span className=\"text-nowrap text-[14px] text-black\">{translate(option.label)}</span>\n                            } else if (displayMode === 'text') {\n                                padding = 'px-4'\n                                startIcon = undefined\n                                content = <span className=\"text-[14px]\">{translate(option.label)}</span>\n                            } else if (displayMode === 'icon') {\n                                padding = 'px-3'\n                                content = null\n                                startIcon = option.icon || 'portrait'\n                            }\n\n                            return (\n                                <Tooltip key={option.value}>\n                                    <TooltipTrigger asChild>\n                                        <CTA\n                                            variant={ctaVariant}\n                                            size=\"small\"\n                                            onClick={() => !option.disabled && onChange(option.value)}\n                                            className={`\n                                        ${dimensions}\n                                        ${padding}\n                                    `}\n                                            startIcon={startIcon}\n                                            disabled={option.disabled}\n\n                                        >\n                                            {content}\n                                        </CTA>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                        <p className=\"font-medium\">{translate(option.label)}</p>\n                                        {option.description && (\n                                            <p className=\"text-sm mt-1\">{translate(option.description)}</p>\n                                        )}\n                                    </TooltipContent>\n                                </Tooltip>\n                            )\n                        })}\n                    </div>\n                </div>\n            )\n        }\n\n        if (variant === 'tab') {\n            return (\n                <div\n                    className={`${\n                        effectiveLabelPosition === 'left' ? 'flex flex-row items-center gap-4' : 'flex flex-col'\n                    } ${className}`}\n                >\n                    {label && (\n                        <label\n                            className={`${\n                                effectiveLabelPosition === 'left'\n                                    ? 'text-sm font-medium min-w-[120px]'\n                                    : 'mb-2 text-sm font-medium'\n                            }`}\n                        >\n                            {translate(label)}\n                        </label>\n                    )}\n                    <div className=\"flex\">\n                        {options.map((option) => {\n                            let dimensions = 'min-w-[120px] h-[45px]'\n                            let padding = 'px-4'\n\n                            if (displayMode === 'icon-only') {\n                                dimensions = 'w-[45px] h-[45px]'\n                                padding = 'p-0'\n                            }\n\n                            return (\n                                <CTA\n                                    key={option.value}\n                                    variant={ctaVariant}\n                                    size=\"small\"\n                                    onClick={() => !option.disabled && onChange(option.value)}\n                                    className={`\n                                        ${dimensions}\n                                        ${padding}\n                                    `}\n                                    startIcon={option.icon}\n                                    disabled={option.disabled}\n                                >\n                                    {translate(option.label)}\n                                </CTA>\n                            )\n                        })}\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div\n                className={`${\n                    effectiveLabelPosition === 'left' ? 'flex flex-row items-center gap-4' : 'flex flex-col'\n                } ${className}`}\n            >\n                {label && (\n                    <label\n                        className={`${\n                            effectiveLabelPosition === 'left'\n                                ? 'text-sm font-medium min-w-[120px]'\n                                : 'mb-2 text-sm font-medium'\n                        }`}\n                    >\n                        {translate(label)}\n                    </label>\n                )}\n                <Select value={value} onValueChange={onChange} name={name}>\n                    <SelectTrigger className={expand ? 'w-full' : 'w-[180px]'}>\n                        <SelectValue placeholder={placeholder}/>\n                    </SelectTrigger>\n                    <SelectContent>\n                        {options.map((option) => (\n                            <SelectItem key={option.value} value={option.value} disabled={option.disabled}>\n                            <span className=\"flex items-center gap-2 w-full text-text-reverse\">\n                                {showIcons && option.icon && <Picto name={option.icon} size=\"medium\"/>}\n                                {option.img && <img src={option.img} alt={option.label} width={100} height={100}/>}\n                                {option.label}\n                                {option.description && (\n                                    <Tooltip>\n                                        <TooltipTrigger asChild>\n                                            <span className=\"ml-1 text-muted-foreground cursor-help\">â“˜</span>\n                                        </TooltipTrigger>\n                                        <TooltipContent>\n                                            <p>{option.description}</p>\n                                        </TooltipContent>\n                                    </Tooltip>\n                                )}\n                            </span>\n                            </SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n            </div>\n        )\n    }\n)\n\nSelector.displayName = 'Selector';\n\nexport default Selector",
      "type": "registry:ui"
    }
  ]
}