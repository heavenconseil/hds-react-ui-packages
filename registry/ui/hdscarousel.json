{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hdscarousel",
  "type": "registry:ui",
  "description": "A versatile Carousel component with image and videos handling",
  "dependencies": [
    "swiper/react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/hdscarousel.tsx",
      "content": "import {forwardRef} from \"react\";\nimport {Swiper, SwiperSlide} from \"swiper/react\";\nimport {Navigation, Pagination, Scrollbar, A11y, Thumbs, Autoplay, EffectFade} from 'swiper/modules';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/autoplay';\nimport 'swiper/css/pagination';\nimport 'swiper/css/scrollbar';\nimport 'swiper/css/effect-fade';\nimport CTA from \"@/components/CTA/CTA\";\n\nexport interface MediaItem {\n    type: 'image' | 'video';\n    src: string;\n    alt?: string;\n    title?: string;\n    subtitle?: string;\n    titleImg?: string;\n    titleImgClassName?: string;\n    ctaText?: string;\n    image?: string;\n    imageClassName?: string;\n    ctaStartIcon?: string;\n    ctaEndIcon?: string;\n    ctaVariant?: string;\n    poster?: string;\n    autoplay?: boolean;\n    muted?: boolean;\n    loop?: boolean;\n}\n\nexport interface HDSCarouselProps {\n    items: MediaItem[];\n    variant?: 'default' | 'bannerslider';\n    className?: string;\n    showNavigation?: boolean;\n    showPagination?: boolean;\n    showScrollbar?: boolean;\n    autoplay?: boolean | {\n        delay?: number;\n        disableOnInteraction?: boolean;\n    };\n    spaceBetween?: number;\n    slidesPerView?: number | 'auto';\n    centeredSlides?: boolean;\n    loop?: boolean;\n    height?: string;\n}\n\nconst HDSCarousel = forwardRef<HTMLDivElement, HDSCarouselProps>(\n    (\n        {\n            items,\n            variant = 'default',\n            className = '',\n            showNavigation = false,\n            showPagination = true,\n            showScrollbar = false,\n            autoplay = true,\n            spaceBetween = 24,\n            slidesPerView = 1,\n            centeredSlides = false,\n            loop = false,\n            height = ''\n        },\n        ref) => {\n\n\n        const renderOverlay = (item: MediaItem) => {\n            if (!(item.title || item.subtitle || item.ctaText)) return null;\n\n            return (\n                <div\n                    className={`absolute inset-0 z-10 pointer-events-none flex items-end p-6 bg-gradient-to-t from-black/60 to-transparent w-full ${variant === 'bannerslider' ? 'justify-center text-center' : 'justify-between'\n                    }`}>\n                    <div className=\"text-white\">\n                        {item.titleImg && (\n                            <img className={item.titleImgClassName} src={item.titleImg}/>\n                        )}\n                        {item.title && (\n                            <h3 className={`font-bold mb-2 ${variant === 'bannerslider' ? 'text-3xl md:text-5xl' : 'text-xl md:text-2xl'\n                            }`}>\n                                {item.title}\n                            </h3>\n                        )}\n                        {item.subtitle && (\n                            <p className={`mb-4 ${variant === 'bannerslider' ? 'text-lg md:text-xl' : 'text-base'\n                            }`}>\n                                {item.subtitle}\n                            </p>\n                        )}\n                        {item.ctaText && (\n                            <CTA\n                                startIcon={item.ctaStartIcon}\n                                endIcon={item.ctaEndIcon}\n                                className={`inline-flex items-center px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors ${variant === 'bannerslider' ? 'text-lg' : 'text-base'\n                                }`}>\n                                {item.ctaText}\n                            </CTA>\n                        )}\n                    </div>\n                    <div className=\"\">\n                        {item.image && (\n                            <img className={item.imageClassName} src={item.image} alt=\"\"/>\n                        )}\n                    </div>\n                </div>\n            );\n        };\n\n        const renderMediaContent = (item: MediaItem) => {\n            if (item.type === 'video') {\n                return (\n                    <div className=\"relative w-full h-full overflow-hidden bg-red-200\">\n                        <video\n                            src={item.src}\n                            poster={item.poster}\n                            autoPlay={item.autoplay}\n                            muted={item.muted}\n                            loop={item.loop}\n                            playsInline\n                            className=\"w-full h-full object-cover aspect-video\"\n                            style={{}}\n                            aria-label={item.alt || item.title}\n                        />\n                        {renderOverlay(item)}\n                    </div>\n                );\n            }\n\n            return (\n                <div className=\"relative w-full h-full\">\n                    <img\n                        src={item.src}\n                        alt={item.alt || item.title || 'Carousel image'}\n                        className=\"w-full h-full object-cover\"\n                    />\n                    {renderOverlay(item)}\n                </div>\n            );\n        };\n\n\n        const autoplayConfig = autoplay ? (typeof autoplay === 'object' ? autoplay : {delay: 3000}) : false;\n        const delay = autoplayConfig ? autoplayConfig.delay || 3000 : 3000;\n\n        if (typeof window !== 'undefined') {\n            document.documentElement.style.setProperty('--swiper-autoplay-delay', `${delay}ms`);\n        }\n\n        const swiperConfig = {\n            modules: [Navigation, Pagination, Scrollbar, A11y, Thumbs, Autoplay, EffectFade],\n            spaceBetween,\n            slidesPerView,\n            centeredSlides,\n            loop,\n            effect: 'fade',\n            autoplay: autoplayConfig,\n            navigation: showNavigation,\n            pagination: showPagination ? {\n                clickable: true,\n                dynamicBullets: false,\n            } : false,\n            scrollbar: showScrollbar ? {draggable: true} : false,\n            className: `hds-carousel hds-carousel--${variant} ${className}`.trim(),\n            on: {\n                slideChangeTransitionEnd: function() {\n                    const activeBullet = document.querySelector('.swiper-pagination-bullet-active') as HTMLElement;\n                    if (activeBullet) {\n                        const clone = activeBullet.cloneNode(true) as HTMLElement;\n                        activeBullet.parentNode?.replaceChild(clone, activeBullet);\n                    }\n                }\n            }\n        };\n\n        return (\n            <div\n                ref={ref}\n                className={`relative ${variant === 'bannerslider' ? 'w-full' : 'w-full mx-auto'\n                }`}\n            >\n                <Swiper {...swiperConfig}>\n                    {items.map((item, index) => (\n                        <SwiperSlide key={index} style={{height}} className={`flex items-center justify-center !${height}`}>\n                            <div className=\"w-full h-full\">\n                                {renderMediaContent(item)}\n                            </div>\n                        </SwiperSlide>\n                    ))}\n                </Swiper>\n            </div>\n        )\n    }\n);\n\nHDSCarousel.displayName = 'HDSCarousel';\n\nexport {HDSCarousel};\n",
      "type": "registry:ui"
    }
  ]
}
