{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cta",
  "type": "registry:ui",
  "description": "A versatile CTA button component with multiple variants, sizes, and loading states",
  "dependencies": [
    "class-variance-authority",
    "clsx"
  ],
  "registryDependencies": [
    "utils",
    "picto"
  ],
  "files": [
    {
      "path": "ui/cta.tsx",
      "content": "import React, { forwardRef, ForwardRefExoticComponent, ReactNode, RefAttributes, ButtonHTMLAttributes } from 'react'\nimport { cn } from '@/lib/utils'\nimport { Picto } from './picto'\n\nexport interface CTAProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'title'> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive'\n  size?: 'sm' | 'default' | 'lg'\n  href?: string\n  target?: string\n  onClick?: (event?: React.MouseEvent<HTMLButtonElement>) => void\n  startIcon?: string\n  endIcon?: string\n  children?: ReactNode\n  disabled?: boolean\n  expand?: boolean\n  loading?: boolean\n}\n\nconst CTA = forwardRef<HTMLButtonElement, CTAProps>(\n  (\n    {\n      variant = 'primary',\n      size = 'default',\n      href,\n      target = '_self',\n      onClick,\n      children,\n      className = '',\n      startIcon,\n      endIcon,\n      disabled = false,\n      expand = false,\n      loading = false,\n      ...props\n    },\n    ref\n  ) => {\n    const baseStyles = cn(\n      'inline-flex items-center justify-center rounded-md font-medium',\n      'transition-colors duration-200 ease-in-out',\n      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n      'disabled:pointer-events-none disabled:opacity-50',\n      'whitespace-nowrap cursor-pointer'\n    )\n\n    const sizeStyles = {\n      sm: 'h-8 px-3 text-sm gap-1.5',\n      default: 'h-10 px-4 text-sm gap-2',\n      lg: 'h-12 px-6 text-base gap-2'\n    }\n\n    const variantStyles = {\n      primary: cn(\n        'bg-primary text-primary-foreground hover:bg-primary/90',\n        'focus-visible:ring-primary'\n      ),\n      secondary: cn(\n        'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        'focus-visible:ring-secondary'\n      ),\n      outline: cn(\n        'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n        'focus-visible:ring-ring'\n      ),\n      ghost: cn(\n        'bg-transparent hover:bg-accent hover:text-accent-foreground',\n        'focus-visible:ring-ring'\n      ),\n      destructive: cn(\n        'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        'focus-visible:ring-destructive'\n      )\n    }\n\n    const buttonClasses = cn(\n      baseStyles,\n      sizeStyles[size],\n      variantStyles[variant],\n      expand && 'w-full',\n      className\n    )\n\n    const iconSize = size === 'sm' ? 'small' : size === 'lg' ? 'large' : 'medium'\n\n    const content = (\n      <>\n        {loading && <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\" />}\n        {!loading && startIcon && <Picto name={startIcon} size={iconSize} />}\n        {children}\n        {!loading && endIcon && <Picto name={endIcon} size={iconSize} />}\n      </>\n    )\n\n    if (href && !disabled) {\n      return (\n        <a\n          href={href}\n          target={target}\n          className={buttonClasses}\n          onClick={onClick as any}\n          {...(props as any)}\n        >\n          {content}\n        </a>\n      )\n    }\n\n    return (\n      <button\n        ref={ref}\n        onClick={disabled || loading ? undefined : onClick}\n        className={buttonClasses}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {content}\n      </button>\n    )\n  }\n)\n\nCTA.displayName = 'CTA'\n\nexport default CTA as ForwardRefExoticComponent<CTAProps & RefAttributes<HTMLButtonElement>>",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "meta": {
    "tags": ["button", "cta", "call-to-action"]
  }
}
