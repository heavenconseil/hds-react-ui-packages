{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hdscard",
  "type": "registry:ui",
  "description": "A versatile Card component with multiple variants",
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "ui/hdscard.tsx",
      "content": "import * as React from 'react';\nimport { forwardRef } from 'react';\nimport { cn } from '@/lib/utils';\nimport {CTA} from \"@/components/ui/cta\";\n\nexport interface HDSCardProps {\n    title?: string;\n    publishDate?: Date;\n    image?: string;\n    onClick?: () => void;\n    className?: string;\n    subtitle?: string;\n    badgeLabel?: string;\n    badgeIcon?: string;\n    primaryButtonText?: string;\n    secondaryButtonText?: string;\n    onPrimaryClick?: () => void;\n    onSecondaryClick?: (e: Event) => void;\n    variant?: 'default' | 'small' | 'bento-left-large' | 'bento-right-large' | 'bento-top-large' | 'bento-equal';\n    bgColor?: string;\n    textColor?: string;\n    primaryButtonVariant?: 'primary' | 'secondary' | 'outline';\n    secondaryButtonVariant?: 'primary' | 'secondary' | 'outline';\n    primaryButtonClassName?: string;\n    secondaryButtonClassName?: string;\n    primaryButtonStyle?: React.CSSProperties;\n    secondaryButtonStyle?: React.CSSProperties;\n    titlePosition?: 'above' | 'below' | 'overlay';\n    backgroundImage?: string;\n    overlayOpacity?: number;\n    children?: React.ReactNode;\n    customContent?: React.ReactNode;\n    hideDefaultContent?: boolean;\n    // Props spÃ©cifiques au Bento\n    images?: { src: string; alt?: string }[];\n    imageHeight?: number;\n    onImageClick?: (index: number, image: { src: string; alt?: string }) => void;\n}\n\nconst HDSImage = ({\n    width,\n    height,\n    src,\n    alt,\n    className,\n}: {\n    width: number;\n    height: number;\n    src: string;\n    alt?: string;\n    className?: string;\n}) => {\n    if (!src) {\n        return <div className={cn('rounded-xl bg-gray-200', className)} style={{ height, width }}></div>;\n    }\n    return (\n        <img\n            src={src}\n            alt={alt}\n            width={width}\n            height={height}\n            className={cn('rounded-xl object-cover', className)}\n            style={{ height, width }}\n        />\n    );\n};\n\n// Record des variants de HDSCard\nconst HDSCardVariants: Record<string, {\n    padding: string;\n    bentoLayout?: 'left-large' | 'right-large' | 'top-large' | 'equal';\n    isBento: boolean;\n}> = {\n    'default': {\n        padding: 'p-6',\n        isBento: false\n    },\n    'small': {\n        padding: 'p-3',\n        isBento: false\n    },\n    'bento-left-large': {\n        padding: 'p-6',\n        bentoLayout: 'left-large',\n        isBento: true\n    },\n    'bento-right-large': {\n        padding: 'p-6',\n        bentoLayout: 'right-large',\n        isBento: true\n    },\n    'bento-top-large': {\n        padding: 'p-6',\n        bentoLayout: 'top-large',\n        isBento: true\n    },\n    'bento-equal': {\n        padding: 'p-6',\n        bentoLayout: 'equal',\n        isBento: true\n    }\n};\n\nconst HDSCard = forwardRef<HTMLDivElement, HDSCardProps>(\n    (\n        {\n            title,\n            subtitle,\n            image,\n            primaryButtonText,\n            secondaryButtonText,\n            variant = 'default',\n            className,\n            onClick,\n            onPrimaryClick,\n            onSecondaryClick,\n            badgeIcon,\n            badgeLabel,\n            bgColor,\n            textColor,\n            primaryButtonVariant = 'primary',\n            secondaryButtonVariant = 'secondary',\n            primaryButtonClassName,\n            secondaryButtonClassName,\n            primaryButtonStyle,\n            secondaryButtonStyle,\n            titlePosition = 'below',\n            backgroundImage,\n            overlayOpacity = 0.4,\n            children,\n            customContent,\n            hideDefaultContent = false,\n            // Props Bento\n            images,\n            imageHeight = 200,\n            onImageClick,\n            ...props\n        },\n        ref\n    ) => {\n        const variantConfig = HDSCardVariants[variant] || HDSCardVariants.default;\n        const isBentoVariant = variantConfig.isBento;\n\n        const baseStyles = cn(\n            'relative w-full overflow-hidden shadow-lg cursor-pointer hover:shadow-xl transition-shadow rounded-3xl',\n            variantConfig.padding,\n            titlePosition === 'overlay' && 'p-0',\n            className\n        );\n\n        const cardStyle: React.CSSProperties = {\n            backgroundColor: backgroundImage ? 'transparent' : (bgColor || '#f8f9fa'),\n            color: textColor || '#000',\n            ...(backgroundImage && {\n                backgroundImage: `url(${backgroundImage})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n            }),\n        };\n\n        const TitleContent = () => {\n            if (!title && !subtitle) return null;\n            \n            return (\n                <div className={cn(\n                    'space-y-2',\n                    titlePosition === 'overlay' && 'absolute bottom-0 left-0 right-0 z-20 p-6 text-white'\n                )}>\n                    {title && (\n                        <h3 className={cn(\n                            'font-bold leading-tight',\n                            variant === 'small' ? 'text-lg' : 'text-2xl',\n                            titlePosition === 'overlay' && 'text-white drop-shadow-lg'\n                        )}>\n                            {title}\n                        </h3>\n                    )}\n                    \n                    {subtitle && (\n                        <p className={cn(\n                            'opacity-80',\n                            variant === 'small' ? 'text-sm' : 'text-base',\n                            titlePosition === 'overlay' && 'text-white/90 drop-shadow'\n                        )}>\n                            {subtitle}\n                        </p>\n                    )}\n                </div>\n            );\n        };\n\n        const CustomContentArea = () => {\n            if (!customContent) return null;\n            \n            return (\n                <div className={cn(\n                    'mt-4',\n                    titlePosition === 'overlay' && 'absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20 w-full px-6'\n                )}>\n                    {customContent}\n                </div>\n            );\n        };\n\n        const ImageContent = () => {\n            const imageElement = image || backgroundImage;\n            if (!imageElement && titlePosition !== 'overlay') return null;\n            \n            return (\n                <div className={cn(\n                    'relative overflow-hidden',\n                    titlePosition === 'below' && 'mb-4',\n                    titlePosition === 'above' && 'mt-4',\n                    titlePosition === 'overlay' && 'absolute inset-0'\n                )}>\n                    {image && titlePosition !== 'overlay' && (\n                        <HDSImage \n                            width={variant === 'small' ? 200 : 400} \n                            height={variant === 'small' ? 120 : 200} \n                            src={image} \n                        />\n                    )}\n                    \n                    {/* Overlay for background image */}\n                    {titlePosition === 'overlay' && backgroundImage && (\n                        <div \n                            className=\"absolute inset-0 bg-black/40\" \n                            style={{ opacity: overlayOpacity }}\n                        />\n                    )}\n                    \n                    {/* Badge overlay */}\n                    {badgeLabel && (\n                        <div className=\"absolute top-3 left-3 z-10\">\n                            <div className=\"bg-black/20 backdrop-blur-sm text-white px-3 py-1.5 rounded-full flex items-center gap-2\">\n                                {badgeIcon && <span>{badgeIcon}</span>}\n                                <span className=\"text-xs font-medium uppercase tracking-wide\">\n                                    {badgeLabel}\n                                </span>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            );\n        };\n\n        const ButtonsContent = () => {\n            if (!primaryButtonText && !secondaryButtonText) return null;\n            \n            // Si seulement le bouton primaire existe, le centrer\n            const hasOnlyPrimaryButton = primaryButtonText && !secondaryButtonText;\n            \n            return (\n                <div className={cn(\n                    'flex gap-2 mt-4',\n                    variant === 'small' ? 'flex-col' : (hasOnlyPrimaryButton ? 'justify-center' : 'justify-between'),\n                    titlePosition === 'overlay' && 'absolute bottom-6 right-6 z-20'\n                )}>\n                    {primaryButtonText && (\n                        <CTA\n                            onClick={(e) => {\n                                e?.stopPropagation();\n                                onPrimaryClick?.();\n                            }}\n                            className={cn(\n                                \"px-4 py-2 tex bg-black rounded-lg transition-colors font-medium\",\n                                primaryButtonClassName\n                            )}\n                            variant={primaryButtonVariant}\n                            style={primaryButtonStyle}\n                        >\n                            {primaryButtonText}\n                        </CTA>\n                    )}\n                    {secondaryButtonText && (\n                        <CTA\n                            onClick={(e) => {\n                                e?.stopPropagation();\n                                onSecondaryClick?.(e as any);\n                            }}\n                            variant={secondaryButtonVariant}\n                            className={cn(\n                                \"px-4 py-2 border font-medium\",\n                                secondaryButtonClassName\n                            )}\n                            style={secondaryButtonStyle}\n                        >\n                            {secondaryButtonText}\n                        </CTA>\n                    )}\n                </div>\n            );\n        };\n\n        // Bento Grid Content\n        const BentoContent = () => {\n            if (!isBentoVariant || !images || images.length !== 3) return null;\n\n            const getBentoLayout = () => {\n                switch (variantConfig.bentoLayout) {\n                    case 'left-large':\n                        return {\n                            container: 'grid grid-cols-2 grid-rows-2 gap-2 h-full',\n                            image0: 'row-span-2',\n                            image1: '',\n                            image2: '',\n                        };\n                    case 'right-large':\n                        return {\n                            container: 'grid grid-cols-2 grid-rows-2 gap-2 h-full',\n                            image0: 'col-start-1 row-start-1',\n                            image1: 'col-start-1 row-start-2',\n                            image2: 'col-start-2 row-start-1 row-span-2',\n                        };\n                    case 'top-large':\n                        return {\n                            container: 'grid grid-rows-2 gap-2 h-full',\n                            image0: 'col-span-full',\n                            image1: 'grid grid-cols-2 gap-2',\n                            image2: '',\n                        };\n                    case 'equal':\n                        return {\n                            container: 'grid grid-cols-3 gap-2 h-full',\n                            image0: '',\n                            image1: '',\n                            image2: '',\n                        };\n                    default:\n                        return {\n                            container: 'grid grid-cols-2 grid-rows-2 gap-2 h-full',\n                            image0: 'row-span-2',\n                            image1: '',\n                            image2: '',\n                        };\n                }\n            };\n\n            const layoutClasses = getBentoLayout();\n\n            const BentoImage = ({ image, index, className }: { \n                image: { src: string; alt?: string }; \n                index: number; \n                className?: string \n            }) => (\n                <div \n                    className={cn('relative overflow-hidden rounded-lg cursor-pointer group', className)}\n                    onClick={(e) => {\n                        e.stopPropagation();\n                        onImageClick?.(index, image);\n                    }}\n                >\n                    <img\n                        src={image.src}\n                        alt={image.alt || `Image ${index + 1}`}\n                        className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                    />\n                    <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors\" />\n                </div>\n            );\n\n            return (\n                <div className=\"relative overflow-hidden\" style={{ height: imageHeight }}>\n                    {variantConfig.bentoLayout === 'top-large' ? (\n                        <div className={layoutClasses.container}>\n                            <BentoImage \n                                image={images[0]} \n                                index={0} \n                                className={layoutClasses.image0}\n                            />\n                            <div className={layoutClasses.image1}>\n                                <BentoImage \n                                    image={images[1]} \n                                    index={1} \n                                />\n                                <BentoImage \n                                    image={images[2]} \n                                    index={2} \n                                />\n                            </div>\n                        </div>\n                    ) : (\n                        <div className={layoutClasses.container}>\n                            <BentoImage \n                                image={images[0]} \n                                index={0} \n                                className={layoutClasses.image0}\n                            />\n                            <BentoImage \n                                image={images[1]} \n                                index={1} \n                                className={layoutClasses.image1}\n                            />\n                            <BentoImage \n                                image={images[2]} \n                                index={2} \n                                className={layoutClasses.image2}\n                            />\n                        </div>\n                    )}\n                </div>\n            );\n        };\n\n        // Si hideDefaultContent est true, afficher seulement le contenu personnalisÃ©\n        if (hideDefaultContent) {\n            return (\n                <div\n                    ref={ref}\n                    className={baseStyles}\n                    style={cardStyle}\n                    onClick={onClick}\n                    {...props}\n                >\n                    {children || customContent}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                ref={ref}\n                className={baseStyles}\n                style={cardStyle}\n                onClick={onClick}\n                {...props}\n            >\n                {/* Title above image */}\n                {titlePosition === 'above' && !hideDefaultContent && <TitleContent />}\n                \n                {/* Image content - Bento or regular */}\n                {!hideDefaultContent && (isBentoVariant ? <BentoContent /> : <ImageContent />)}\n                \n                {/* Custom content area */}\n                <CustomContentArea />\n                \n                {/* Title below image or overlay */}\n                {(titlePosition === 'below' || titlePosition === 'overlay') && !hideDefaultContent && <TitleContent />}\n                \n                {/* Children content - inserted between title and buttons */}\n                {children && (\n                    <div className={cn(\n                        'mt-4',\n                        titlePosition === 'overlay' && 'absolute top-1/4 left-6 right-6 z-20'\n                    )}>\n                        {children}\n                    </div>\n                )}\n                \n                {/* Action buttons */}\n                {!hideDefaultContent && (primaryButtonText || secondaryButtonText) && <ButtonsContent />}\n            </div>\n        );\n    }\n);\n\nHDSCard.displayName = 'HDSCard';\n\nexport { HDSCard };",
      "type": "registry:ui"
    }
  ]
}
