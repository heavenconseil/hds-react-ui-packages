{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "picto",
  "type": "registry:ui",
  "description": "Système d'icônes SVG avec variants et tailles",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "ui/picto.tsx",
      "content": "import React, { FC } from 'react'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Simple SVG icons\nconst CheckIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n  </svg>\n)\n\nconst XMarkIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n  </svg>\n)\n\nconst HeartIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" />\n  </svg>\n)\n\nconst StarIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z\" />\n  </svg>\n)\n\nconst UserIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z\" />\n  </svg>\n)\n\nconst PlusIcon: FC<{ className?: string }> = ({ className }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n  </svg>\n)\n\nconst sizeMap: Record<string, string> = {\n  small: 'w-4 h-4',\n  medium: 'w-5 h-5',\n  large: 'w-6 h-6'\n}\n\nconst ErrorIcon: FC<{ className?: string }> = ({ className = '' }) => (\n  <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\" />\n  </svg>\n)\n\ntype PictoComponent = React.FC<{ className?: string }>\n\nexport const PictoLib: Record<string, PictoComponent> = {\n  check: CheckIcon,\n  close: XMarkIcon,\n  heart: HeartIcon,\n  star: StarIcon,\n  user: UserIcon,\n  plus: PlusIcon,\n  error: ErrorIcon\n}\n\nexport interface PictoProps {\n  name: string\n  className?: string\n  size?: 'small' | 'medium' | 'large'\n}\n\nexport const Picto: FC<PictoProps> = ({ name, className = '', size = 'medium' }) => {\n  const PictoComponent = PictoLib[name.toLowerCase()]\n  const sizeClass = sizeMap[size] || sizeMap['medium']\n\n  if (PictoComponent) {\n    return <PictoComponent className={cn(sizeClass, className)} />\n  } else {\n    console.warn(`Picto not found for name: ${name}. Rendering ErrorIcon.`)\n    return <ErrorIcon className={cn(sizeClass, className)} />\n  }\n}\n\nexport { Picto as default }",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
